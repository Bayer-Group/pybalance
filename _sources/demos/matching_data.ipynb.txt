{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1ccb3bcc",
   "metadata": {},
   "source": [
    "# Matching Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31614f02",
   "metadata": {},
   "source": [
    "In this notebook, we demonstrate the MatchingData class, which organizes population data for matching, and some plotting tools for visualizing the data. You can download this notebook to run yourself here: https://github.com/Bayer-Group/pybalance/blob/main/sphinx/demos/matching_data.ipynb."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e60274e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os \n",
    "import logging \n",
    "logging.basicConfig(\n",
    "    format=\"%(levelname)-4s [%(filename)s:%(lineno)d] %(message)s\",\n",
    "    level='INFO',\n",
    ")\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "import pybalance\n",
    "from pybalance import MatchingData, MatchingHeaders, split_target_pool\n",
    "from pybalance.visualization import (\n",
    "    plot_numeric_features, \n",
    "    plot_categoric_features, \n",
    "    plot_binary_features,\n",
    "    plot_joint_numeric_distributions,\n",
    "    plot_joint_numeric_categoric_distributions,\n",
    "    plot_per_feature_loss\n",
    ")\n",
    "from pybalance.sim import get_paper_dataset_path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda436e5",
   "metadata": {},
   "source": [
    "## Initializing MatchingData"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5184f024",
   "metadata": {},
   "source": [
    "The MatchingData class is a thin wrapper around pandas DataFrame that additionally keeps track of certain metadata about the columns relevant for matching. MatchingData can be initialized from either a string or pandas DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "02250cfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <b>Headers Numeric: </b><br>\n",
       "        ['age', 'height', 'weight']<br><br>\n",
       "        <b>Headers Categoric: </b><br>\n",
       "        ['gender', 'haircolor', 'country', 'binary_0', 'binary_1', 'binary_2', 'binary_3'] <br><br>\n",
       "        <b>Populations</b> <br>\n",
       "        ['pool', 'target'] <br>\n",
       "        <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64.854093</td>\n",
       "      <td>189.466850</td>\n",
       "      <td>88.835049</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>135740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52.571993</td>\n",
       "      <td>158.134940</td>\n",
       "      <td>94.215107</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>49288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25.828361</td>\n",
       "      <td>154.692482</td>\n",
       "      <td>94.226222</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>256676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70.177571</td>\n",
       "      <td>160.536632</td>\n",
       "      <td>94.244356</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>338287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.779164</td>\n",
       "      <td>153.551419</td>\n",
       "      <td>86.161814</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274995</th>\n",
       "      <td>62.547794</td>\n",
       "      <td>186.005015</td>\n",
       "      <td>50.975051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>579081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274996</th>\n",
       "      <td>69.879934</td>\n",
       "      <td>142.371386</td>\n",
       "      <td>100.138389</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>569939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274997</th>\n",
       "      <td>56.921402</td>\n",
       "      <td>130.639589</td>\n",
       "      <td>108.745182</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>532419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274998</th>\n",
       "      <td>34.082754</td>\n",
       "      <td>174.764051</td>\n",
       "      <td>67.998396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>566266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274999</th>\n",
       "      <td>60.981259</td>\n",
       "      <td>137.419436</td>\n",
       "      <td>89.897817</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>544231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>275000 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "<pybalance.utils.matching_data.MatchingData at 0x7f7b5821e850>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# initialize MatchingData from path\n",
    "data_path = get_paper_dataset_path()\n",
    "m = MatchingData(data=data_path)\n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a45adfde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <b>Headers Numeric: </b><br>\n",
       "        ['age', 'height', 'weight']<br><br>\n",
       "        <b>Headers Categoric: </b><br>\n",
       "        ['gender', 'haircolor', 'country', 'binary_0', 'binary_1', 'binary_2', 'binary_3'] <br><br>\n",
       "        <b>Populations</b> <br>\n",
       "        ['pool', 'target'] <br>\n",
       "        <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64.854093</td>\n",
       "      <td>189.466850</td>\n",
       "      <td>88.835049</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>135740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52.571993</td>\n",
       "      <td>158.134940</td>\n",
       "      <td>94.215107</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>49288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25.828361</td>\n",
       "      <td>154.692482</td>\n",
       "      <td>94.226222</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>256676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70.177571</td>\n",
       "      <td>160.536632</td>\n",
       "      <td>94.244356</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>338287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.779164</td>\n",
       "      <td>153.551419</td>\n",
       "      <td>86.161814</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274995</th>\n",
       "      <td>62.547794</td>\n",
       "      <td>186.005015</td>\n",
       "      <td>50.975051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>579081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274996</th>\n",
       "      <td>69.879934</td>\n",
       "      <td>142.371386</td>\n",
       "      <td>100.138389</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>569939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274997</th>\n",
       "      <td>56.921402</td>\n",
       "      <td>130.639589</td>\n",
       "      <td>108.745182</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>532419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274998</th>\n",
       "      <td>34.082754</td>\n",
       "      <td>174.764051</td>\n",
       "      <td>67.998396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>566266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274999</th>\n",
       "      <td>60.981259</td>\n",
       "      <td>137.419436</td>\n",
       "      <td>89.897817</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>544231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>275000 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "<pybalance.utils.matching_data.MatchingData at 0x7f7b81fa35e0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# initialize MatchingData from pandas DataFrame\n",
    "data = pd.read_parquet(data_path)\n",
    "m = MatchingData(data=data)\n",
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51980126",
   "metadata": {},
   "source": [
    "MatchingData will infer which covariates to use for matching and the separation of these into numeric and categoric, unless explicitly specified. Here we specify a subset of the covariates to use for matching. Note that the unused columns are still present in the data, but will simply not be used for matching."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4099f276",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <b>Headers Numeric: </b><br>\n",
       "        ['age', 'weight', 'height']<br><br>\n",
       "        <b>Headers Categoric: </b><br>\n",
       "        ['country', 'gender', 'binary_0', 'binary_1'] <br><br>\n",
       "        <b>Populations</b> <br>\n",
       "        ['pool', 'target'] <br>\n",
       "        <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64.854093</td>\n",
       "      <td>189.466850</td>\n",
       "      <td>88.835049</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>135740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52.571993</td>\n",
       "      <td>158.134940</td>\n",
       "      <td>94.215107</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>49288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25.828361</td>\n",
       "      <td>154.692482</td>\n",
       "      <td>94.226222</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>256676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70.177571</td>\n",
       "      <td>160.536632</td>\n",
       "      <td>94.244356</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>338287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.779164</td>\n",
       "      <td>153.551419</td>\n",
       "      <td>86.161814</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274995</th>\n",
       "      <td>62.547794</td>\n",
       "      <td>186.005015</td>\n",
       "      <td>50.975051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>579081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274996</th>\n",
       "      <td>69.879934</td>\n",
       "      <td>142.371386</td>\n",
       "      <td>100.138389</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>569939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274997</th>\n",
       "      <td>56.921402</td>\n",
       "      <td>130.639589</td>\n",
       "      <td>108.745182</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>532419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274998</th>\n",
       "      <td>34.082754</td>\n",
       "      <td>174.764051</td>\n",
       "      <td>67.998396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>566266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274999</th>\n",
       "      <td>60.981259</td>\n",
       "      <td>137.419436</td>\n",
       "      <td>89.897817</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>544231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>275000 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "<pybalance.utils.matching_data.MatchingData at 0x7f7b48e59eb0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "headers = MatchingHeaders(\n",
    "    categoric=['country', 'gender', 'binary_0', 'binary_1'],\n",
    "    numeric=['age', 'weight', 'height']\n",
    ")\n",
    "m_restricted_features = MatchingData(\n",
    "    data=data, \n",
    "    headers=headers\n",
    ")\n",
    "m_restricted_features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d101d154",
   "metadata": {},
   "source": [
    "## Exploring MatchingData"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39ecd310",
   "metadata": {},
   "source": [
    "The describe*() methods can be used to generate summary tables of the matching covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2122eccd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>pool</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>population size</th>\n",
       "      <th>N</th>\n",
       "      <td>250000.00</td>\n",
       "      <td>25000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">gender</th>\n",
       "      <th>0.0</th>\n",
       "      <td>120054.00</td>\n",
       "      <td>12956.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>129946.00</td>\n",
       "      <td>12044.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">haircolor</th>\n",
       "      <th>0.0</th>\n",
       "      <td>100096.00</td>\n",
       "      <td>4924.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>75185.00</td>\n",
       "      <td>10055.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>74719.00</td>\n",
       "      <td>10021.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">country</th>\n",
       "      <th>0.0</th>\n",
       "      <td>0.00</td>\n",
       "      <td>2490.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>25033.00</td>\n",
       "      <td>5045.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>49534.00</td>\n",
       "      <td>4981.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75337.00</td>\n",
       "      <td>2474.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>74934.00</td>\n",
       "      <td>5010.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>25162.00</td>\n",
       "      <td>5000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">binary_0</th>\n",
       "      <th>0.0</th>\n",
       "      <td>225028.00</td>\n",
       "      <td>17535.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>24972.00</td>\n",
       "      <td>7465.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">binary_1</th>\n",
       "      <th>0.0</th>\n",
       "      <td>175673.00</td>\n",
       "      <td>12527.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>74327.00</td>\n",
       "      <td>12473.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">binary_2</th>\n",
       "      <th>0.0</th>\n",
       "      <td>125113.00</td>\n",
       "      <td>17472.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>124887.00</td>\n",
       "      <td>7528.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">binary_3</th>\n",
       "      <th>0.0</th>\n",
       "      <td>49933.00</td>\n",
       "      <td>12562.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>200067.00</td>\n",
       "      <td>12438.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"7\" valign=\"top\">age</th>\n",
       "      <th>mean</th>\n",
       "      <td>55.27</td>\n",
       "      <td>48.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13.18</td>\n",
       "      <td>14.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.01</td>\n",
       "      <td>18.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q25</th>\n",
       "      <td>46.38</td>\n",
       "      <td>37.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median</th>\n",
       "      <td>57.15</td>\n",
       "      <td>48.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q75</th>\n",
       "      <td>66.10</td>\n",
       "      <td>59.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>75.00</td>\n",
       "      <td>75.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"7\" valign=\"top\">height</th>\n",
       "      <th>mean</th>\n",
       "      <td>159.13</td>\n",
       "      <td>153.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>19.84</td>\n",
       "      <td>16.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>125.00</td>\n",
       "      <td>125.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q25</th>\n",
       "      <td>142.09</td>\n",
       "      <td>140.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median</th>\n",
       "      <td>158.74</td>\n",
       "      <td>152.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q75</th>\n",
       "      <td>175.87</td>\n",
       "      <td>165.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>195.00</td>\n",
       "      <td>195.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"7\" valign=\"top\">weight</th>\n",
       "      <th>mean</th>\n",
       "      <td>88.30</td>\n",
       "      <td>82.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>16.32</td>\n",
       "      <td>18.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>50.00</td>\n",
       "      <td>50.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q25</th>\n",
       "      <td>76.39</td>\n",
       "      <td>66.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median</th>\n",
       "      <td>88.85</td>\n",
       "      <td>81.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q75</th>\n",
       "      <td>100.88</td>\n",
       "      <td>97.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>120.00</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             pool    target\n",
       "population size N       250000.00  25000.00\n",
       "gender          0.0     120054.00  12956.00\n",
       "                1.0     129946.00  12044.00\n",
       "haircolor       0.0     100096.00   4924.00\n",
       "                1.0      75185.00  10055.00\n",
       "                2        74719.00  10021.00\n",
       "country         0.0          0.00   2490.00\n",
       "                1.0      25033.00   5045.00\n",
       "                2        49534.00   4981.00\n",
       "                3        75337.00   2474.00\n",
       "                4        74934.00   5010.00\n",
       "                5        25162.00   5000.00\n",
       "binary_0        0.0     225028.00  17535.00\n",
       "                1.0      24972.00   7465.00\n",
       "binary_1        0.0     175673.00  12527.00\n",
       "                1.0      74327.00  12473.00\n",
       "binary_2        0.0     125113.00  17472.00\n",
       "                1.0     124887.00   7528.00\n",
       "binary_3        0.0      49933.00  12562.00\n",
       "                1.0     200067.00  12438.00\n",
       "age             mean        55.27     48.33\n",
       "                std         13.18     14.39\n",
       "                min         18.01     18.01\n",
       "                q25         46.38     37.29\n",
       "                median      57.15     48.74\n",
       "                q75         66.10     59.85\n",
       "                max         75.00     75.00\n",
       "height          mean       159.13    153.68\n",
       "                std         19.84     16.45\n",
       "                min        125.00    125.00\n",
       "                q25        142.09    140.29\n",
       "                median     158.74    152.75\n",
       "                q75        175.87    165.95\n",
       "                max        195.00    195.00\n",
       "weight          mean        88.30     82.25\n",
       "                std         16.32     18.89\n",
       "                min         50.00     50.00\n",
       "                q25         76.39     66.14\n",
       "                median      88.85     81.69\n",
       "                q75        100.88     97.41\n",
       "                max        120.00    120.00"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.describe(normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50da290d",
   "metadata": {},
   "source": [
    "You can access fields on the underlying data similarly to how you would in pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5401a9cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>population</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pool</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>pool</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>pool</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pool</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>pool</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274995</th>\n",
       "      <td>target</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274996</th>\n",
       "      <td>target</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274997</th>\n",
       "      <td>target</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274998</th>\n",
       "      <td>target</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274999</th>\n",
       "      <td>target</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>275000 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       population  gender\n",
       "0            pool     1.0\n",
       "1            pool     1.0\n",
       "2            pool     1.0\n",
       "3            pool     1.0\n",
       "4            pool     0.0\n",
       "...           ...     ...\n",
       "274995     target     0.0\n",
       "274996     target     1.0\n",
       "274997     target     1.0\n",
       "274998     target     0.0\n",
       "274999     target     1.0\n",
       "\n",
       "[275000 rows x 2 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m[['population', 'gender']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "191d7c65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.779164</td>\n",
       "      <td>153.551419</td>\n",
       "      <td>86.161814</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>67.404918</td>\n",
       "      <td>132.383184</td>\n",
       "      <td>67.107753</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>171211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>61.489148</td>\n",
       "      <td>140.780034</td>\n",
       "      <td>73.662572</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>73.718093</td>\n",
       "      <td>133.743721</td>\n",
       "      <td>58.879321</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>58718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>70.707782</td>\n",
       "      <td>156.629048</td>\n",
       "      <td>70.681391</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>352801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274990</th>\n",
       "      <td>19.063519</td>\n",
       "      <td>167.704149</td>\n",
       "      <td>59.876565</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>536365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274992</th>\n",
       "      <td>58.745450</td>\n",
       "      <td>146.747313</td>\n",
       "      <td>70.291448</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>535279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274993</th>\n",
       "      <td>55.736083</td>\n",
       "      <td>132.434020</td>\n",
       "      <td>92.264209</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>595582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274995</th>\n",
       "      <td>62.547794</td>\n",
       "      <td>186.005015</td>\n",
       "      <td>50.975051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>579081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274998</th>\n",
       "      <td>34.082754</td>\n",
       "      <td>174.764051</td>\n",
       "      <td>67.998396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>566266</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>133010 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              age      height     weight  gender  haircolor  country  \\\n",
       "4       73.779164  153.551419  86.161814     0.0          0        1   \n",
       "7       67.404918  132.383184  67.107753     0.0          0        5   \n",
       "11      61.489148  140.780034  73.662572     0.0          0        1   \n",
       "12      73.718093  133.743721  58.879321     0.0          1        4   \n",
       "13      70.707782  156.629048  70.681391     0.0          0        2   \n",
       "...           ...         ...        ...     ...        ...      ...   \n",
       "274990  19.063519  167.704149  59.876565     0.0          2        4   \n",
       "274992  58.745450  146.747313  70.291448     0.0          2        4   \n",
       "274993  55.736083  132.434020  92.264209     0.0          1        4   \n",
       "274995  62.547794  186.005015  50.975051     0.0          0        1   \n",
       "274998  34.082754  174.764051  67.998396     0.0          2        2   \n",
       "\n",
       "       population  binary_0  binary_1  binary_2  binary_3  patient_id  \n",
       "4            pool         0         0         1         1       72849  \n",
       "7            pool         0         0         0         1      171211  \n",
       "11           pool         0         0         0         1       20695  \n",
       "12           pool         0         0         1         0       58718  \n",
       "13           pool         0         1         1         1      352801  \n",
       "...           ...       ...       ...       ...       ...         ...  \n",
       "274990     target         0         1         1         1      536365  \n",
       "274992     target         0         0         0         1      535279  \n",
       "274993     target         0         1         0         0      595582  \n",
       "274995     target         0         0         1         1      579081  \n",
       "274998     target         0         0         0         1      566266  \n",
       "\n",
       "[133010 rows x 12 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m[m['gender'] == 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b63f8c72",
   "metadata": {},
   "source": [
    "Often our matching data consists of exactly two populations, a reference population, \n",
    "which we call the \"target\" and a population to be matched, which we call the \"pool\". \n",
    "It is sometimes convenient to split these two populations and the function \n",
    "split_target_pool does just that. The function will assign the smaller population to the\n",
    "target, unless explicitly given the name of the target population. Note that the returned\n",
    "values are pandas DataFrame objects and not MatchingData objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e630b0f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>250000</th>\n",
       "      <td>57.266010</td>\n",
       "      <td>159.759575</td>\n",
       "      <td>94.325267</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>512966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250001</th>\n",
       "      <td>53.152645</td>\n",
       "      <td>145.515410</td>\n",
       "      <td>95.988094</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>540606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250002</th>\n",
       "      <td>34.079212</td>\n",
       "      <td>166.272208</td>\n",
       "      <td>73.090671</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>578266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250003</th>\n",
       "      <td>45.494927</td>\n",
       "      <td>144.336677</td>\n",
       "      <td>96.678251</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>559858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250004</th>\n",
       "      <td>18.036012</td>\n",
       "      <td>174.843524</td>\n",
       "      <td>60.586475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>588368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age      height     weight  gender  haircolor  country  \\\n",
       "250000  57.266010  159.759575  94.325267     0.0          1        4   \n",
       "250001  53.152645  145.515410  95.988094     0.0          1        2   \n",
       "250002  34.079212  166.272208  73.090671     0.0          1        2   \n",
       "250003  45.494927  144.336677  96.678251     1.0          2        5   \n",
       "250004  18.036012  174.843524  60.586475     0.0          1        2   \n",
       "\n",
       "       population  binary_0  binary_1  binary_2  binary_3  patient_id  \n",
       "250000     target         0         1         0         1      512966  \n",
       "250001     target         1         0         1         1      540606  \n",
       "250002     target         0         0         1         1      578266  \n",
       "250003     target         1         1         1         1      559858  \n",
       "250004     target         1         1         0         1      588368  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target, pool = split_target_pool(m)\n",
    "target.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "83f90e8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>250000</th>\n",
       "      <td>57.266010</td>\n",
       "      <td>159.759575</td>\n",
       "      <td>94.325267</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>512966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250001</th>\n",
       "      <td>53.152645</td>\n",
       "      <td>145.515410</td>\n",
       "      <td>95.988094</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>540606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250002</th>\n",
       "      <td>34.079212</td>\n",
       "      <td>166.272208</td>\n",
       "      <td>73.090671</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>578266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250003</th>\n",
       "      <td>45.494927</td>\n",
       "      <td>144.336677</td>\n",
       "      <td>96.678251</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>559858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250004</th>\n",
       "      <td>18.036012</td>\n",
       "      <td>174.843524</td>\n",
       "      <td>60.586475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>588368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age      height     weight  gender  haircolor  country  \\\n",
       "250000  57.266010  159.759575  94.325267     0.0          1        4   \n",
       "250001  53.152645  145.515410  95.988094     0.0          1        2   \n",
       "250002  34.079212  166.272208  73.090671     0.0          1        2   \n",
       "250003  45.494927  144.336677  96.678251     1.0          2        5   \n",
       "250004  18.036012  174.843524  60.586475     0.0          1        2   \n",
       "\n",
       "       population  binary_0  binary_1  binary_2  binary_3  patient_id  \n",
       "250000     target         0         1         0         1      512966  \n",
       "250001     target         1         0         1         1      540606  \n",
       "250002     target         0         0         1         1      578266  \n",
       "250003     target         1         1         1         1      559858  \n",
       "250004     target         1         1         0         1      588368  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target, pool = split_target_pool(m, target_name='pool')\n",
    "pool.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13d05376",
   "metadata": {},
   "source": [
    "## Visualizing MatchingData"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dda104d",
   "metadata": {},
   "source": [
    "Some built-in tools help you get a quick visual snapshot of the data. Many of these plotting routines are thin wrappers around seaborn plotting routines with extra logic relevant to matching situations (e.g. where one of the populations is a reference population or where variables should be treated as numeric / categoric). In most cases, the user can pass along any keyword arguments that are understood by the underlying seaborn routine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "029b22de",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "888c6bc9-73c1-499b-bc0e-82801e46dbbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <b>Headers Numeric: </b><br>\n",
       "        ['age', 'height', 'weight']<br><br>\n",
       "        <b>Headers Categoric: </b><br>\n",
       "        ['gender', 'haircolor', 'country', 'binary_0', 'binary_1', 'binary_2', 'binary_3'] <br><br>\n",
       "        <b>Populations</b> <br>\n",
       "        ['pool', 'target'] <br>\n",
       "        <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gender</th>\n",
       "      <th>haircolor</th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>binary_0</th>\n",
       "      <th>binary_1</th>\n",
       "      <th>binary_2</th>\n",
       "      <th>binary_3</th>\n",
       "      <th>patient_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64.854093</td>\n",
       "      <td>189.466850</td>\n",
       "      <td>88.835049</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>135740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52.571993</td>\n",
       "      <td>158.134940</td>\n",
       "      <td>94.215107</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>49288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25.828361</td>\n",
       "      <td>154.692482</td>\n",
       "      <td>94.226222</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>256676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70.177571</td>\n",
       "      <td>160.536632</td>\n",
       "      <td>94.244356</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>338287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73.779164</td>\n",
       "      <td>153.551419</td>\n",
       "      <td>86.161814</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>pool</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274995</th>\n",
       "      <td>62.547794</td>\n",
       "      <td>186.005015</td>\n",
       "      <td>50.975051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>579081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274996</th>\n",
       "      <td>69.879934</td>\n",
       "      <td>142.371386</td>\n",
       "      <td>100.138389</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>569939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274997</th>\n",
       "      <td>56.921402</td>\n",
       "      <td>130.639589</td>\n",
       "      <td>108.745182</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>532419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274998</th>\n",
       "      <td>34.082754</td>\n",
       "      <td>174.764051</td>\n",
       "      <td>67.998396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>target</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>566266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274999</th>\n",
       "      <td>60.981259</td>\n",
       "      <td>137.419436</td>\n",
       "      <td>89.897817</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>target</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>544231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>275000 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "<pybalance.utils.matching_data.MatchingData at 0x7f7b81fa35e0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "925b6b8c-abac-4956-969a-a6a7d4d33f9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the standardized mean difference for each feature\n",
    "from pybalance.utils import BetaBalance\n",
    "bc = BetaBalance(m, standardize_difference=True)\n",
    "fig = plot_per_feature_loss(m, bc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "042b9a5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x450 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plot_categoric_features(m, cumulative=False, palette='colorblind', include_binary=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "62efef9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x900 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plot_numeric_features(m, bins=10, cumulative=False, palette='colorblind')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "19711749",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sprivite/src/pybalance/venv/pybalance/lib/python3.9/site-packages/pybalance/visualization/distributions.py:331: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
      "  plt.gca().set_yticklabels([\"\"] * len(labels), minor=True)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x250 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plot_binary_features(m, palette='colorblind', orient_horizontal=False, standardize_difference=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pybalance",
   "language": "python",
   "name": "pybalance"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
